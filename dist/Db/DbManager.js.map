{"version":3,"file":"DbManager.js","sourceRoot":"","sources":["../../src/Db/DbManager.ts"],"names":[],"mappings":";;AAEA;;;;GAIG;AACH;IAQE,YAAsB,MAAc,EAAY,MAAmB;QAA7C,WAAM,GAAN,MAAM,CAAQ;QAAY,WAAM,GAAN,MAAM,CAAa;QAJ3D,mBAAc,GAAY,KAAK,CAAC;QAKtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC;QAC/B,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACK,UAAU;QAChB,MAAM,GAAG,GAAqB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5D,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;QACtC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC;IACvC,CAAC;IAEO,gBAAgB,CAAC,QAAmC;QAC1D,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,CAAM;QAC5B,IAAI,CAAC,EAAE,GAAI,CAAC,CAAC,MAAM,CAAC,MAAsB,CAAC;QAC3C,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACK,UAAU,CAAC,CAAM;QACvB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QAC1B,IAAI,MAAgC,CAAC;QACrC,IAAI,KAAgB,CAAC;QAErB,GAAG,CAAC,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACnC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACxB,MAAM,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,gBAAgB,EAAE,CAAC;gBAC7C,IAAI,QAAwB,CAAC;gBAC7B,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;gBAC9D,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;IACH,CAAC;IAEM,OAAO;QACZ,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;QAChB,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;CACF;AA3DD,8BA2DC","sourcesContent":["import { TableInfo } from './Tables/TableInfo';\r\n\r\n/**\r\n * @class DbManager\r\n * @description Initializes IndexedDB instance, and creates tables\r\n * @author carathorys\r\n */\r\nexport class DbManager {\r\n\r\n  public db: IDBDatabase;\r\n\r\n  private hasInitialized: boolean = false;\r\n  private dbOpenedCallbackList: Array<(db: IDBDatabase) => void>;\r\n  private IndxDb: IDBFactory;\r\n\r\n  constructor(protected dbName: string, protected tInfos: TableInfo[]) {\r\n    this.IndxDb = window.indexedDB;\r\n    this.dbOpenedCallbackList = [];\r\n    this.OpenInitDB();\r\n  }\r\n\r\n  /**\r\n   * @description Opens and initializes IndexedDB, and updates it if it's necessary\r\n   */\r\n  private OpenInitDB() {\r\n    const req: IDBOpenDBRequest = this.IndxDb.open(this.dbName);\r\n    req.onupgradeneeded = this._addTables;\r\n    req.onsuccess = this._databaseOpened;\r\n  }\r\n\r\n  private OnDatabaseOpened(callback: (db: IDBDatabase) => void) {\r\n    this.dbOpenedCallbackList.push(callback);\r\n  }\r\n\r\n  /**\r\n   * @param e IDBRequest 'onsuccess' event\r\n   */\r\n  private _databaseOpened(e: any) {\r\n    this.db = (e.target.result as IDBDatabase);\r\n    this.dbOpenedCallbackList.forEach((callback) => callback(this.db));\r\n  }\r\n\r\n  /**\r\n   * @param e\r\n   */\r\n  private _addTables(e: any) {\r\n    this.db = e.target.result;\r\n    let params: IDBObjectStoreParameters;\r\n    let tInfo: TableInfo;\r\n\r\n    for (const it in this.tInfos) {\r\n      if (this.tInfos.hasOwnProperty(it)) {\r\n        tInfo = this.tInfos[it];\r\n        params = { keyPath: tInfo.PrimaryFieldName };\r\n        let tblLocal: IDBObjectStore;\r\n        tblLocal = this.db.createObjectStore(tInfo.TableName, params);\r\n        tblLocal.createIndex(tInfo.PrimaryIndexName, tInfo.PrimaryFieldName);\r\n      }\r\n    }\r\n  }\r\n\r\n  public ResetDB() {\r\n    this.db.close();\r\n    this.IndxDb.deleteDatabase(this.dbName);\r\n    this.OpenInitDB();\r\n  }\r\n}\r\n"]}